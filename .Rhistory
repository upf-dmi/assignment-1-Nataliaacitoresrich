y = as.numeric(table(correct_Table1$Death)),
labels = as.numeric(table(correct_Table1$Death)),
pos = 3,
cex = 0.8,
col = "black")
Table_2 <- read_excel("/data_ex2/Table2.XLSX", col_names = FALSE, na = "NI")
Table_2 <- read_excel("data/data_ex2/Table_2.XLSX", col_names = FALSE, na = "NI")
Table_2 <- read_excel("data_ex2/Table2.XLSX", col_names = FALSE, na = "NI")
Table_2[2,1] <- Table_2[1,1]
colnames(Table_2) <- Table_2[2,]
Table_2 <- Table_2[-c(1,2),]
#See if any of the IDs are duplicated
id_counts <- table(Table_2$ID)
repeated_ids <- names(id_counts[id_counts > 1])
print(repeated_ids)
#"COAG-HSJD-086" "COAG-HSJD-136" are duplicate. Remove both records of the duplicate since the data different between them.
unique_Table2 <- Table_2[!Table_2$ID %in% c("COAG-HSJD-086", "COAG-HSJD-136"), ]
library(tidyr)
extended_Table2 <- unique_Table2 %>% fill(ID , .direction = "down")
str(extended_Table2)
table(extended_Table2$ID, useNA = "ifany")
#In order to classify the records of table 2 by the clinical classification,we need to see if the IDs are the same between tables 1 and 2
# IDs in Table1 but not in Table2
missing_in_Table1 <- correct_Table1$ID[!correct_Table1$ID %in% extended_Table2$ID]
missing_in_Table1
#Since they are not the same we will remove the Ids from table2 missing in table 1
pruned_Table2 <- extended_Table2[extended_Table2$ID %in% correct_Table1$ID, ]
#There are Ids with different number of days, we will calculate the values as the median of each set of days for each ID, since that is how they did it in the paper.
str(pruned_Table2)
pruned_Table2[, 2:27] <- lapply(pruned_Table2[, 2:27], as.numeric)
median_Table2 <- pruned_Table2 %>%
mutate(ID = as.character(ID)) %>%
group_by(ID) %>%
summarise(across(where(is.numeric), median, na.rm = TRUE))
library(mice)
#Impute the missing values
imputed_data <- mice(median_Table2)
summary(imputed_data)
completed_Table2 <- complete(imputed_data, action = 1)
#Add the column of the clinical classification from Table 1 to the IDs from Table 2
group_Table2 <- merge(completed_Table2, correct_Table1[, c("ID", "Group")], by = "ID", all.x = TRUE)
#Subset the columns that will be used for the heatmap
colnames(group_Table2)
heatmap_table <- group_Table2[, c(1, 28, 3:14)]
# Transpose the data so genes are rows and patients are columns
heatmap_data <- t(heatmap_table[, 3:14]) # Gene expression matrix
colnames(heatmap_data) <- heatmap_table$ID  # Assign patient IDs as column names
#Scale the gene expression values
heatmap_data <-sweep(heatmap_data, 2, colSums(heatmap_data), FUN = "/") * 100
# Prepare the annotation for which Ids are from which groups
groups_info <- heatmap_table$Group
annotation <- data.frame(Group = groups_info)
rownames(annotation) <- heatmap_table$ID  # Ensure rownames of annotation match patient IDs
library(pheatmap)
library(RColorBrewer)
pheatmap(
heatmap_data,
cluster_rows = TRUE,
cluster_cols = TRUE,
scale = "none",
color =  colorRampPalette(c("white", "orange", "darkred"))(50),
main = "Relative Expression Heatmap",
annotation_col = annotation,
annotation_colors = list( Group = c(G1 = "red", G2 = "green", G3 = "blue", G4 = "yellow", Other = "pink")
),
annotation_legend = FALSE,
annotation_names_col = TRUE,
show_colnames = FALSE,
)
Table_2 <- read_excel("data_ex2/Table2.XLSX", col_names = FALSE, na = "NI",skip = 1)
Table_2[2,1] <- Table_2[1,1]
colnames(Table_2) <- Table_2[2,]
Table_2 <- Table_2[-c(1,2),]
#See if any of the IDs are duplicated
id_counts <- table(Table_2$ID)
Table_2 <- read_excel("data_ex2/Table2.XLSX", na = "NI", skip = 1)
Table_2[2,1] <- Table_2[1,1]
colnames(Table_2) <- Table_2[2,]
Table_2 <- Table_2[-c(1,2),]
#See if any of the IDs are duplicated
id_counts <- table(Table_2$ID)
repeated_ids <- names(id_counts[id_counts > 1])
print(repeated_ids)
#"COAG-HSJD-086" "COAG-HSJD-136" are duplicate. Remove both records of the duplicate since the data different between them.
unique_Table2 <- Table_2[!Table_2$ID %in% c("COAG-HSJD-086", "COAG-HSJD-136"), ]
extended_Table2 <- unique_Table2 %>% fill(ID , .direction = "down")
Table_2 <- read_excel("data_ex2/Table2.XLSX", col_names = FALSE, na = "NI")
Table_2 <- read_excel("data_ex2/Table2.XLSX", col_names = FALSE, na = "NI")
Table_2[2,1] <- Table_2[1,1]
colnames(Table_2) <- Table_2[2,]
Table_2 <- Table_2[-c(1,2),]
#See if any of the IDs are duplicated
id_counts <- table(Table_2$ID)
repeated_ids <- names(id_counts[id_counts > 1])
print(repeated_ids)
#"COAG-HSJD-086" "COAG-HSJD-136" are duplicate. Remove both records of the duplicate since the data different between them.
unique_Table2 <- Table_2[!Table_2$ID %in% c("COAG-HSJD-086", "COAG-HSJD-136"), ]
library(tidyr)
extended_Table2 <- unique_Table2 %>% fill(ID , .direction = "down")
str(extended_Table2)
table(extended_Table2$ID, useNA = "ifany")
#In order to classify the records of table 2 by the clinical classification,we need to see if the IDs are the same between tables 1 and 2
# IDs in Table1 but not in Table2
missing_in_Table1 <- correct_Table1$ID[!correct_Table1$ID %in% extended_Table2$ID]
#libraries needed
library(readxl)
library(ggplot2)
library(ggpubr)
library(RColorBrewer)
library(dplyr)
library(gridExtra)
#Opening both data tables
Table1 <- read_excel("data_ex2/Table1.XLSX",
na = "NI", skip = 1)
View(Table1)
#Reproduction of figure 1.D: Vital status barplot
table(correct_Table1$Death)
#libraries needed
library(readxl)
library(ggplot2)
library(ggpubr)
library(RColorBrewer)
library(dplyr)
library(gridExtra)
#Opening both data tables
Table1 <- read_excel("data_ex2/Table1.XLSX",
na = "NI", skip = 1)
View(Table1)
class(Table1$Age)
summary(Table1$Age)
#Renaming the variable so that it does not have spaces
Table1$useNIV<-Table1$`Use of NIV`
class(Table1$useNIV)
table(Table1$useNIV)
#Renaming the variable so that it does not have spaces
Table1$useAMV<-Table1$`Use of AMV`
#Renaming the variable so that it does not have spaces
Table1$useAMV<-Table1$`Use of AMV`
class(Table1$useAMV)
#Renaming the variable so that it does not have spaces
Table1$Diagnosis_ARDS<-Table1$`ARDS Diagnosis`
table(Table1$Diagnosis_ARDS)
# Taking out value 8 from the NIV variable
Table1<-Table1[Table1$Diagnosis_ARDS !=4,]
table(Table1$Death)
Table1 <- Table1[Table1$Death != 3, ]   # Taking out the value "3"
table(Table1$Gender)
Table1 <- Table1[Table1$Gender != 72, ]
table(Table1$Gender)
#Correcting the mistake in the name
Table1$Admission_to_UCI<-Table1$`Admission to ICU`
Table1 <- Table1[Table1$Admission_to_UCI != c("4,5Yes"), ]#taking out 4.5Yes values
table(Table1$Admission_to_UCI)
#See if any of the IDs are duplicated
table(Table1$ID)
#Remove the duplicated records based on the ID column
unique_Table1 <- Table1[!duplicated(Table1$ID), ]
##Reproduction of Figure 1.A: Age barplot
age_barplot <- hist(correct_Table1$Age, col = "azure2", xlab = "Age (years)", ylab = "Frequency (n)", main = "Age")
colnames(clinical_class) <- unlist(clinical_class[1,])
clinical_class <- clinical_class[-1,]
#See if any of the IDs are duplicated
table(Table1$ID)
Table1[duplicated(Table1$ID), ]
#Remove the duplicated records based on the ID column
unique_Table1 <- Table1[!duplicated(Table1$ID), ]
#Remove the remaining record of the duplicates where the data is not equal between the duplicates, COAG-HSJD-197, COAG-HSJD-222(diff date?), COAG-HSJD-243 (date?), COAG-HSJD-244.
correct_Table1 <- unique_Table1[!unique_Table1$ID %in% c("COAG-HSJD-197", "COAG-HSJD-222", "COAG-HSJD-243", "COAG-HSJD-244"), ]
##Reproduction of Figure 1.A: Age barplot
age_barplot <- hist(correct_Table1$Age, col = "azure2", xlab = "Age (years)", ylab = "Frequency (n)", main = "Age")
## Reproduction of Figure 1.B: Clinical classification table
#Create the table
clinical_class <- data.frame(c("Clinical classification", "G1", "G2", "G3", "G4"),
c("NIV", "-","-/+","+", "-/+"),
c("AMV", "-","+/-","-", "+"),
c("ARDS", "-","-","+","+"))
colnames(clinical_class) <- unlist(clinical_class[1,])
clinical_class <- clinical_class[-1,]
#Represent the table with the necessary aesthetic parameters
class_tab <- ggtexttable(clinical_class,
rows = NULL,
cols = colnames(clinical_class),
vp = NULL,
theme = ttheme(),
)
#Add a title to the table
classification_table <- tab_add_title(tab = class_tab, text = "Definition of the clinical classification")
#Printing the classification table
classification_table
## Reproduction of the figure 1.C: Barplot of Groups
#Add a new column for the clinical classification
correct_Table1 <- correct_Table1 %>%
mutate(
Group = case_when(
`Use of NIV` == "No" & `Use of AMV` == "No" & `ARDS Diagnosis` == "No" ~ "G1",
(`Use of NIV` %in% c("No", "Yes")) & (`Use of AMV` %in% c("No", "Yes")) & `ARDS Diagnosis` == "No" ~ "G2",
`Use of NIV` == "Yes" & `Use of AMV` == "No" & `ARDS Diagnosis` == "Yes" ~ "G3",
(`Use of NIV` %in% c("No", "Yes")) & `Use of AMV` == "Yes" & `ARDS Diagnosis` == "Yes" ~ "G4",
TRUE ~ "Other"
)
)
# Create table with frequences
freq_table_Group <- table(correct_Table1$Group)
# Creating the barplot, and capturing the positions of the bars
Barplot_groups<-text(x=barplot(freq_table_Group,
xlab = "Clinical classification",
ylab = "Frequency (n)",
main = "Clinical classification",
col = brewer.pal(4, "Set3"),
ylim = c(0, max(freq_table_Group) + 5)) ,
y = as.numeric(freq_table_Group),
labels = as.numeric(freq_table_Group),
pos = 3,
cex = 0.8,
col = "black")
#Reproduction of figure 1.D: Vital status barplot
table(correct_Table1$Death)
death_fig <-text( x=barplot(table(correct_Table1$Death),
xlab =  "Death", ylab = "Frequency (n)",
main = "Vital status",
col = c(brewer.pal(3, "Set3")) ),
y = as.numeric(table(correct_Table1$Death)),
labels = as.numeric(table(correct_Table1$Death)),
pos = 3,
cex = 0.8,
col = "black")
Table_2 <- read_excel("data_ex2/Table2.XLSX", col_names = FALSE, na = "NI")
Table_2[2,1] <- Table_2[1,1]
colnames(Table_2) <- Table_2[2,]
Table_2 <- Table_2[-c(1,2),]
death_fig <-text( x=barplot(table(correct_Table1$Death),
xlab =  "Death", ylab = "Frequency (n)",
main = "Vital status",
col = c(brewer.pal(3, "Set3")) ),
y = as.numeric(table(correct_Table1$Death)),
labels = as.numeric(table(correct_Table1$Death)),
pos = 3,
cex = 0.8,
col = "black")
view Table_2
view (Table_2)
head (Table_2)
Table_2[2,1] <- Table_2[1,1]
colnames(Table_2) <- Table_2[2,]
Table_2 <- Table_2[-c(1,2),]
#See if any of the IDs are duplicated
id_counts <- table(Table_2$ID)
Table_2[2,1] <- Table_2[1,1]
head(Table_2)
Table_2 <- read_excel("data/data_ex2/Table_2.XLSX", col_names = FALSE, na = "NI")
Table_2 <- read_excel("data_ex2/Table2.XLSX", col_names = FALSE, na = "NI")
head(Table_2)
View(Table_2)
library(readxl)
Table_2 <- read_excel("data_ex2/Table2.XLSX",
na = "NI", skip = 1)
View(Table_2)
names(Table_2)[1]
colnames(Table_2)[1] <- "ID"
head(Table_2)
#See if any of the IDs are duplicated
id_counts <- table(Table_2$ID)
repeated_ids <- names(id_counts[id_counts > 1])
print(repeated_ids)
#"COAG-HSJD-086" "COAG-HSJD-136" are duplicate. Remove both records of the duplicate since the data different between them.
unique_Table2 <- Table_2[!Table_2$ID %in% c("COAG-HSJD-086", "COAG-HSJD-136"), ]
library(tidyr)
extended_Table2 <- unique_Table2 %>% fill(ID , .direction = "down")
str(extended_Table2)
table(extended_Table2$ID, useNA = "ifany")
#In order to classify the records of table 2 by the clinical classification,we need to see if the IDs are the same between tables 1 and 2
# IDs in Table1 but not in Table2
missing_in_Table1 <- correct_Table1$ID[!correct_Table1$ID %in% extended_Table2$ID]
missing_in_Table1
#Since they are not the same we will remove the Ids from table2 missing in table 1
pruned_Table2 <- extended_Table2[extended_Table2$ID %in% correct_Table1$ID, ]
#There are Ids with different number of days, we will calculate the values as the median of each set of days for each ID, since that is how they did it in the paper.
str(pruned_Table2)
pruned_Table2[, 2:27] <- lapply(pruned_Table2[, 2:27], as.numeric)
median_Table2 <- pruned_Table2 %>%
mutate(ID = as.character(ID)) %>%
group_by(ID) %>%
summarise(across(where(is.numeric), median, na.rm = TRUE))
library(mice)
#Impute the missing values
imputed_data <- mice(median_Table2)
summary(imputed_data)
completed_Table2 <- complete(imputed_data, action = 1)
#Add the column of the clinical classification from Table 1 to the IDs from Table 2
group_Table2 <- merge(completed_Table2, correct_Table1[, c("ID", "Group")], by = "ID", all.x = TRUE)
#Subset the columns that will be used for the heatmap
colnames(group_Table2)
heatmap_table <- group_Table2[, c(1, 28, 3:14)]
# Transpose the data so genes are rows and patients are columns
heatmap_data <- t(heatmap_table[, 3:14]) # Gene expression matrix
colnames(heatmap_data) <- heatmap_table$ID  # Assign patient IDs as column names
#Scale the gene expression values
heatmap_data <-sweep(heatmap_data, 2, colSums(heatmap_data), FUN = "/") * 100
# Prepare the annotation for which Ids are from which groups
groups_info <- heatmap_table$Group
annotation <- data.frame(Group = groups_info)
rownames(annotation) <- heatmap_table$ID  # Ensure rownames of annotation match patient IDs
library(pheatmap)
library(RColorBrewer)
pheatmap(
heatmap_data,
cluster_rows = TRUE,
cluster_cols = TRUE,
scale = "none",
color =  colorRampPalette(c("white", "orange", "darkred"))(50),
main = "Relative Expression Heatmap",
annotation_col = annotation,
annotation_colors = list( Group = c(G1 = "red", G2 = "green", G3 = "blue", G4 = "yellow", Other = "pink")
),
annotation_legend = FALSE,
annotation_names_col = TRUE,
show_colnames = FALSE,
)
#In order to classify the records of table 2 by the clinical classification,we need to see if the IDs are the same between tables 1 and 2
# IDs in Table1 but not in Table2
missing_in_Table1 <- correct_Table1$ID[!correct_Table1$ID %in% extended_Table2$ID]
missing_in_Table1
#Since they are not the same we will remove the Ids from table2 missing in table 1
pruned_Table2 <- extended_Table2[extended_Table2$ID %in% correct_Table1$ID, ]
#There are Ids with different number of days, we will calculate the values as the median of each set of days for each ID, since that is how they did it in the paper.
str(pruned_Table2)
pruned_Table2[, 2:27] <- lapply(pruned_Table2[, 2:27], as.numeric)
median_Table2 <- pruned_Table2 %>%
mutate(ID = as.character(ID)) %>%
group_by(ID) %>%
summarise(across(where(is.numeric), median, na.rm = TRUE))
library(mice)
#Impute the missing values
imputed_data <- mice(median_Table2)
summary(imputed_data)
completed_Table2 <- complete(imputed_data, action = 1)
#Add the column of the clinical classification from Table 1 to the IDs from Table 2
group_Table2 <- merge(completed_Table2, correct_Table1[, c("ID", "Group")], by = "ID", all.x = TRUE)
#Subset the columns that will be used for the heatmap
colnames(group_Table2)
heatmap_table <- group_Table2[, c(1, 28, 3:14)]
# Transpose the data so genes are rows and patients are columns
heatmap_data <- t(heatmap_table[, 3:14]) # Gene expression matrix
colnames(heatmap_data) <- heatmap_table$ID  # Assign patient IDs as column names
#Scale the gene expression values
heatmap_data <-sweep(heatmap_data, 2, colSums(heatmap_data), FUN = "/") * 100
# Prepare the annotation for which Ids are from which groups
groups_info <- heatmap_table$Group
annotation <- data.frame(Group = groups_info)
rownames(annotation) <- heatmap_table$ID  # Ensure rownames of annotation match patient IDs
library(pheatmap)
library(RColorBrewer)
pheatmap(
heatmap_data,
cluster_rows = TRUE,
cluster_cols = TRUE,
scale = "none",
color =  colorRampPalette(c("white", "orange", "darkred"))(50),
main = "Relative Expression Heatmap",
annotation_col = annotation,
annotation_colors = list( Group = c(G1 = "red", G2 = "green", G3 = "blue", G4 = "yellow", Other = "pink")
),
annotation_legend = FALSE,
annotation_names_col = TRUE,
show_colnames = FALSE,
)
#Subset the columns that will be used for the heatmap
colnames(group_Table2)
heatmap_table <- group_Table2[, c(1, 28, 3:14)]
# Fix column names to remove special characters
colnames(heatmap_table) <- gsub("β", "b", colnames(heatmap_table))
colnames(heatmap_table) <- gsub("γ", "g", colnames(heatmap_table))
colnames(heatmap_table) <- gsub("ɑ", "a", colnames(heatmap_table))
colnames(Table_2)
# Fix column names to remove special characters
colnames(heatmap_table) <- gsub("β", "b", colnames(heatmap_table))
colnames(heatmap_table) <- gsub("γ", "g", colnames(heatmap_table))
colnames(heatmap_table) <- gsub("ɑ", "a", colnames(heatmap_table))
colnames(heatmap_table)
# Transpose the data so genes are rows and patients are columns
heatmap_data <- t(heatmap_table[, 3:14]) # Gene expression matrix
colnames(heatmap_data) <- heatmap_table$ID  # Assign patient IDs as column names
#Scale the gene expression values
heatmap_data <-sweep(heatmap_data, 2, colSums(heatmap_data), FUN = "/") * 100
# Prepare the annotation for which Ids are from which groups
groups_info <- heatmap_table$Group
annotation <- data.frame(Group = groups_info)
rownames(annotation) <- heatmap_table$ID  # Ensure rownames of annotation match patient IDs
library(pheatmap)
library(RColorBrewer)
pheatmap(
heatmap_data,
cluster_rows = TRUE,
cluster_cols = TRUE,
scale = "none",
color =  colorRampPalette(c("white", "orange", "darkred"))(50),
main = "Relative Expression Heatmap",
annotation_col = annotation,
annotation_colors = list( Group = c(G1 = "red", G2 = "green", G3 = "blue", G4 = "yellow", Other = "pink")
),
annotation_legend = FALSE,
annotation_names_col = TRUE,
show_colnames = FALSE,
)
#Add the column of the gender and death from Table 1 to the IDs from Table 2
all_Table2 <- merge(group_Table2, correct_Table1[, c("ID", "Death", "Gender")], by = "ID", all.x = TRUE)
#Subset the columns that will be used for the heatmap
colnames(all_Table2)
all_heatmap_table <- all_Table2[, c(1, 28, 29,30, 3:14)]
# Transpose the data so genes are rows and patients are columns
all_heatmap_data <- t(all_heatmap_table[, 5:16]) # Gene expression matrix
colnames(all_heatmap_data) <- all_heatmap_table$ID  # Assign patient IDs as column names
#Scale the gene expression values
all_heatmap_data <-sweep(all_heatmap_data, 2, colSums(all_heatmap_data), FUN = "/") * 100
#Add the column of the gender and death from Table 1 to the IDs from Table 2
all_Table2 <- merge(group_Table2, correct_Table1[, c("ID", "Death", "Gender")], by = "ID", all.x = TRUE)
#Subset the columns that will be used for the heatmap
colnames(all_Table2)
all_heatmap_table <- all_Table2[, c(1, 28, 29,30, 3:14)]
# Transpose the data so genes are rows and patients are columns
all_heatmap_data <- t(all_heatmap_table[, 5:16]) # Gene expression matrix
colnames(all_heatmap_data) <- all_heatmap_table$ID  # Assign patient IDs as column names
#Scale the gene expression values
all_heatmap_data <-sweep(all_heatmap_data, 2, colSums(all_heatmap_data), FUN = "/") * 100
# Add death and gender columns to the annotation data frame
groups_info <- all_heatmap_table$Group
death_info <- all_heatmap_table$Death
gender_info <- all_heatmap_table$Gender
# Create the annotation data frame
annotation <- data.frame(
Group = groups_sorted,
Death = death_info,
Gender = gender_info
)
# Create the annotation data frame
annotation <- data.frame(
Group = groups_info,
Death = death_info,
Gender = gender_info
)
rownames(annotation) <- all_heatmap_table$ID  # Ensure rownames match patient IDs
rownames(annotation)
pheatmap(
all_heatmap_data,
cluster_rows = TRUE,
cluster_cols = TRUE,
scale = "none",
color = colorRampPalette(c("#FFEBC9", "orange", "darkred"))(50),
main = "Heatmap with Multiple Annotations",
annotation_col = annotation,
annotation_colors = list(
Group = c(G1 = "red", G2 = "green", G3 = "blue", G4 = "yellow", Other = "pink"),
Death = c(Yes = "black", No = "gray"),
Gender = c(M = "lightblue", F = "pink")),
annotation_legend = FALSE,
annotation_names_col = TRUE,
show_colnames = FALSE
)
# Fix column names to remove special characters
colnames(all_heatmap_table) <- gsub("β", "b", colnames(all_heatmap_table))
colnames(all_heatmap_table) <- gsub("γ", "g", colnames(all_heatmap_table))
colnames(all_heatmap_table) <- gsub("ɑ", "a", colnames(all_heatmap_table))
colnames(all_heatmap_table) #Checking the changes have been performed correctly
# Transpose the data so genes are rows and patients are columns
all_heatmap_data <- t(all_heatmap_table[, 5:16]) # Gene expression matrix
colnames(all_heatmap_data) <- all_heatmap_table$ID  # Assign patient IDs as column names
#Scale the gene expression values
all_heatmap_data <-sweep(all_heatmap_data, 2, colSums(all_heatmap_data), FUN = "/") * 100
# Add death and gender columns to the annotation data frame
groups_info <- all_heatmap_table$Group
death_info <- all_heatmap_table$Death
gender_info <- all_heatmap_table$Gender
# Create the annotation data frame
annotation <- data.frame(
Group = groups_info,
Death = death_info,
Gender = gender_info
)
rownames(annotation) <- all_heatmap_table$ID  # Ensure rownames match patient IDs
pheatmap(
all_heatmap_data,
cluster_rows = TRUE,
cluster_cols = TRUE,
scale = "none",
color = colorRampPalette(c("#FFEBC9", "orange", "darkred"))(50),
main = "Heatmap with Multiple Annotations",
annotation_col = annotation,
annotation_colors = list(
Group = c(G1 = "red", G2 = "green", G3 = "blue", G4 = "yellow", Other = "pink"),
Death = c(Yes = "black", No = "gray"),
Gender = c(M = "lightblue", F = "pink")),
annotation_legend = FALSE,
annotation_names_col = TRUE,
show_colnames = FALSE
)
pheatmap(
heatmap_data,
cluster_rows = TRUE,
cluster_cols = TRUE,
scale = "none",
color =  colorRampPalette(c("#FFEBC9", "orange", "darkred"))(50),
main = "Relative Expression Heatmap",
annotation_col = annotation,
annotation_colors = list( Group = c(G1 = "red", G2 = "green", G3 = "blue", G4 = "yellow", Other = "pink")
),
annotation_legend = FALSE,
annotation_names_col = TRUE,
show_colnames = FALSE,
)
knitr::opts_chunk$set(echo = TRUE)
#See if any of the IDs are duplicated
table(Table1$ID)
